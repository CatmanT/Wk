# -*- coding: utf-8 -*-
import os
import sys

try:
    from urllib.parse import urlparse, urlencode
    from urllib.request import urlopen, Request
    from urllib.error import HTTPError
except ImportError:
    from urlparse import urlparse
    from urllib import urlencode
    from urllib2 import urlopen, Request, HTTPError


import re
import xbmc
import xbmcgui
import xbmcvfs
import xbmcaddon
import xbmcplugin
import plugintools
import unicodedata
import base64
import requests
import shutil
import base64
import time
import six
import random
import json
from datetime import date
from datetime import datetime
try:
    from resolveurl.lib import jsunpack 
except ImportError:
    from resolveurl.plugins.lib import jsunpack 
from resources.modules import control

listaplugin="https://raw.githubusercontent.com/CatmanT/Wk/main/CatWorld/ListRest"
listayt="https://raw.githubusercontent.com/CatmanT/Wk/main/CatWorld/Listeyt"

## Fotos

thmb_ver_canales='https://archive.org/download/bee-1/channels%20live.png'
thmb_ver_xc='https://archive.org/download/bee-1/xtream%20codes.png'
thmb_ver_stb='https://www.tech-and-dev.com/blog/wp-content/uploads/2018/07/acestreamlogo.png'

setting = xbmcaddon.Addon().getSetting

def keyboard_input(default_text="", title="", hidden=False):

    keyboard = xbmc.Keyboard(default_text,title,hidden)
    keyboard.doModal()
    
    if (keyboard.isConfirmed()):
        tecleado = keyboard.getText()
    else:
        tecleado = ""

    return tecleado


def run():
    
    plugintools.log("---> macvod.run <---")
    #plugintools.set_view(plugintools.LIST)
    
    # Get params
    params = plugintools.get_params()
    
    if params.get("action") is None:
        main_list(params)
    else:
       action = params.get("action")
       url = params.get("url")
       exec(action+"(params)")
    plugintools.close_item_list()

##Menu Principal
    
def main_list(params):

    import shutil,xbmc  
    try:
        addon_path3 = xbmcvfs.translatePath('special://home/cache').decode('utf-8')
        shutil.rmtree(addon_path3, ignore_errors=True) 
    except:
        pass
    
        
    plugintools.log("macvod.main_list ")    
    params['title']="[COLOR red]i[COLOR orange]P[COLOR green]TV[COLOR orange] CHaNNeLS[/COLOR]"
    params['thumbnail']=thmb_ver_canales
    params['fanart']="https://i.ytimg.com/vi/_7bFXWNfXTY/maxresdefault.jpg"
    thumbnail = thmb_ver_xc 
	

    plugintools.add_item(action="liniiyt",title="[B][COLOR goldenrod]Youtube Selection[/B][/COLOR]",thumbnail="https://seeklogo.com/images/Y/youtube-logo-51CDA55827-seeklogo.com.png",url= "",fanart="",folder= True ) 	 
    plugintools.add_item(action="cautayt",title="[COLOR gold]Search YouTube[/COLOR]",thumbnail="https://www.seekpng.com/png/detail/264-2647509_home-youtube-channel-logo-png.png",url= "https://www.youtube.com/results?search_query=",fanart="https://i.ytimg.com/vi/RDtH27uCdZ4/maxresdefault.jpg",folder=True )
    plugintools.add_item(action="ytlive",title="[COLOR gold]test live[/COLOR]",thumbnail="https://i.imgur.com/qE9UeYX.jpg",url= listaplugin, fanart="",folder= True )  
    plugintools.add_item(action="liniAce", title="[B][COLOR goldenrod]AceStream[/B][/COLOR]   [HORUS addon required]",thumbnail="https://www.tech-and-dev.com/blog/wp-content/uploads/2018/07/acestreamlogo.png", fanart="",  url= "https://raw.githubusercontent.com/CatmanT/Wk/main/CatWorld/acesport", folder= True )
    plugintools.add_item(action="m3ucode", url=listaplugin,title="[B][COLOR goldenrod]Radio Romania LIVE[/B][/COLOR]",thumbnail="https://play-lh.googleusercontent.com/9oAY_HmAg9LPCZs3Tc3hCPief4iIcFHYR0X5SioF2lToPgaoyNVD13ZY_Y71U_apkE8",folder=True )


##Menu liniiyt

def liniiyt(params):
    plugintools.log("macovd.mac")
    thumbnail = params.get("thumbnail")    
    plugintools.add_item(action="yt_Manager",title="[B][COLOR goldenrod]Romania News + [/B][/COLOR] [RO]",thumbnail="https://i.ibb.co/LJMgdyW/RO.png",url= "news",fanart="",folder= True ) 
    plugintools.add_item(action="yt_Manager",title="[B][COLOR goldenrod]US-World News + [/B][/COLOR] [EN]",thumbnail="https://i.ibb.co/6DFF6Zc/worldnews.png",url= "newsworld",fanart="",folder= True )  
    plugintools.add_item(action="yt_Manager",title="[B][COLOR goldenrod]Music Videos[/B][/COLOR]",thumbnail="https://archive.org/download/CatmanTX/musicvideo.png",url= "music",fanart="https://i.ytimg.com/vi/u4xaYhw1X_M/maxresdefault.jpg",folder= True )
    plugintools.add_item(action="yt_Manager",title="[B][COLOR goldenrod]Sport[/B][/COLOR]",thumbnail="https://previews.123rf.com/images/duug/duug1206/duug120600003/13966994-sport-logo.jpg",url= "sport",fanart="https://cdn.abcotvs.com/dip/images/12721210_2023-wabc-NewApp-SPORTS.jpg",folder= True )   
    plugintools.add_item(action="yt_Manager",title="[B][COLOR goldenrod]Documentaries[/B][/COLOR]",thumbnail="https://i.ibb.co/xC3RxpP/docu.png",url= "docu",fanart="https://www.rd.com/wp-content/uploads/2022/06/20-Best-History-Documentaries-to-Stream-Now-FT-GettyImages-1194188952.jpg",folder= True ) 



##Menu liniAce 
def liniAce(params):
    plugintools.log("macovd.mac")
    thumbnail = params.get("thumbnail")
    plugintools.add_item(action="listaacecat", title="[B][COLOR goldenrod]ACE[/B][/COLOR] [sport]",thumbnail="https://www.tech-and-dev.com/blog/wp-content/uploads/2018/07/acestreamlogo.png", fanart="",  url= "https://raw.githubusercontent.com/CatmanT/Wk/main/CatWorld/as.sport", folder= True )
    plugintools.add_item(action="listaacecat", title="[B][COLOR goldenrod]ACE[/B][/COLOR] [music]",thumbnail="https://www.tech-and-dev.com/blog/wp-content/uploads/2018/07/acestreamlogo.png", fanart="",  url= "https://raw.githubusercontent.com/CatmanT/Wk/main/CatWorld/as.music", folder= True )
    plugintools.add_item(action="listaacecat", title="AceStream Cat Test",thumbnail="https://www.tech-and-dev.com/blog/wp-content/uploads/2018/07/acestreamlogo.png", fanart="",  url= "https://raw.githubusercontent.com/CatmanT/Wk/main/CatWorld/aceCAT", folder= True )




    
def listaacecat(params): 
    plugintools.log("macvod.listaace")
    thumbnail = params.get("thumbnail")    

    
    url3 = params.get("url")
 
    request_headers=[]
    request_headers.append(["User-Agent","Mozilla/5.0 (Windows NT 10.0; rv:75.0) Gecko/20100101 Firefox/75.0"])
    body,response_headers = plugintools.read_body_and_headers( url3, headers=request_headers)
    url = body.strip().decode('utf-8')

    matches = plugintools.find_multiple_matches(url,'(?s)(#EXTINF:-1,.*?\nacestream://\w+)')
    for generos in matches:  
        patron=plugintools.find_single_match(generos,'(?s)#EXTINF:-1,(.*?)\nacestream://(\w+)')    
        url=patron[1]
        titulo=patron[0]   
        titulo_transliterat = transliterate(titulo)
        plugintools.add_item(action="resolve_acestream",url=url,title=titulo_transliterat,thumbnail=thumbnail,fanart=thumbnail,folder=False,  isPlayable = True )



#### def code to call list acestream
def listaacecat(params): 
    plugintools.log("macvod.listaace")
    thumbnail = params.get("thumbnail")    

    
    url3 = params.get("url")
 
    request_headers=[]
    request_headers.append(["User-Agent","Mozilla/5.0 (Windows NT 10.0; rv:75.0) Gecko/20100101 Firefox/75.0"])
    body,response_headers = plugintools.read_body_and_headers( url3, headers=request_headers)
    url = body.strip().decode('utf-8')

    matches = plugintools.find_multiple_matches(url,'(?s)(#EXTINF:-1,.*?\nacestream://\w+)')
    for generos in matches:  
        patron=plugintools.find_single_match(generos,'(?s)#EXTINF:-1,(.*?)\nacestream://(\w+)')    
        url=patron[1]
        titulo=patron[0]   
     
        plugintools.add_item(action="resolve_acestream",url=url,title=titulo,thumbnail=thumbnail,fanart=thumbnail,folder=False,  isPlayable = True )

#### yt code to call list
def load_remote_lists():
    url = listayt  # Înlocuiește cu URL-ul tău de Pastebin
    response = requests.get(url)
    if response.status_code == 200:
        data = json.loads(response.text)
        return data
    else:
        return None

def yt_Manager(params):
    data = load_remote_lists()
    if data is None:
        return

    RONewsList = data.get("RONewsList", [])
    WorldNewsList = data.get("WorldNewsList", [])
    MusicList = data.get("MusicList", [])
    SportList = data.get("SportList", [])
    DocuList = data.get("DocuList", [])

    youtube = "plugin://plugin.video.youtube/channel/MI-ID-CANAL/playlists/"
    youtubesearch = "plugin://plugin.video.youtube/search/?q=MI-ID-SEARCH&search_type=notvalid"
    youtubepl = "plugin://plugin.video.youtube/playlist/MI-ID-PLAYLIST/"

    list_type = params.get("url")

    if list_type == "news":
        dataList = RONewsList
    elif list_type == "newsworld":
        dataList = WorldNewsList
    elif list_type == "music":
        dataList = MusicList
    elif list_type == "sport":
        dataList = SportList
    elif list_type == "docu":
        dataList = DocuList
    else:
        return

    for i in range(len(dataList)):
        titu = dataList[i][0]
        id_canal = dataList[i][1]
        logo = dataList[i][2]
        descrip = dataList[i][3]
        tip = dataList[i][4]
        artwork = dataList[i][5]
        
        if tip == "canal":
            videos = youtube.replace("MI-ID-CANAL", id_canal)
        elif tip == "cautare":
            videos = youtubesearch.replace("MI-ID-SEARCH", id_canal)
        elif tip == "playlist":
            videos = youtubepl.replace("MI-ID-PLAYLIST", id_canal)
        
        datamovie = {"Plot": descrip}
        titulo = '[COLOR white]' + titu + '[/COLOR]'
        
        plugintools.add_item(action="lanza", url=videos, title=titulo, thumbnail=logo, fanart=artwork, info_labels=datamovie, folder=True, isPlayable=False)



def lanza(params):
    lasListas = params.get("url")
    
    xbmc.Player().play(lasListas)

# aici se termina code yt to call List yt

def cautayt (params): 
    url = params . get ( "url" ) + keyboard_input("", "Cauta Youtube:", False).replace(" ", "+")
    header = [ ]
    header . append ( [ "User-Agent" , "Mozilla/5.0 (Windows NT 10.0; rv:75.0) Gecko/20100101 Firefox/75.0" ] )
    read_url , read_header = plugintools . read_body_and_headers ( url , headers = header )
    url=read_url.strip().decode('utf-8')
 
    matches =  re.findall(r'(?s)height":202},{"url":"(.+?)".*?title.*?text":"(.+?)"}.*?"videoId":"(.*?)".*?snippetText"\:\{"runs"\:\[\{"text"\:"(.*?)"\}', url, re.DOTALL)
    for thumb, title, url, descrip in matches:
        datamovie = {}
        datamovie["Plot"] = descrip
        plugintools . add_item ( action = "resolve_resolveurl_youtube" , title = title, url = url , thumbnail = thumb, info_labels = datamovie, fanart="", folder = False , isPlayable = True ) 



######  end yt code


def resolve_acestream(params):
    import resolveurl
    finalurl="plugin://script.module.horus?action=play&id={}&title={}&iconimage={}".format(params.get('url'),params.get('title'),params.get("thumbnail"))
    plugintools.play_resolved_url(finalurl)



   


# cod yt live-iptv


def ytlive (params):
    thumbnail = params.get("thumbnail") 
    url = params . get ( "url" )
    header = [ ]
    header . append ( [ "User-Agent" , "Mozilla/5.0 (Windows NT 10.0; rv:75.0) Gecko/20100101 Firefox/75.0" ] )
    read_url , read_header = plugintools . read_body_and_headers ( url , headers = header )
    url=read_url.strip().decode('utf-8')
 
    matches =  re.findall(r'(?s)ytlive\: (.*?) (htt.*?streams)', url, re.DOTALL)
    for title, url in matches:
        plugintools . add_item ( action = "ytliveyt" , title = title, url = url , thumbnail = thumbnail, fanart="",  folder = True ) 
        
def ytliveyt(params):
    thumbnail = params.get("thumbnail") 
    url = params.get("url")
    request_headers = ["User-Agent" , "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:92.0) Gecko/20100101 Firefox/92.0"]
    body, response_headers = plugintools.read_body_and_headers(url, headers=request_headers)
    url = body.strip().decode('utf-8')
    
    
    matches = plugintools.find_multiple_matches(url,'(videoRenderer"\:\{"videoId"\:".*?","thumbnail"\:\{"thumbnails"\:\[\{"url"\:"http.*?hqdefault_live.jpg\?sqp.*?runs"\:\[\{"text"\:".*?"\}\])')
    for generos in matches:  
        patron=plugintools.find_single_match(generos,'(?s)videoRenderer"\:\{"videoId"\:"(.*?)","thumbnail"\:\{"thumbnails"\:\[\{"url"\:"(http.*?hqdefault_live.jpg)\?sqp.*?runs"\:\[\{"text"\:"(.*?)"\}\]')    
        url=patron[0]
        thumb=patron[1]
        title = patron[2]
        plugintools . add_item ( action = "resolve_resolveurl_youtube" , title = title, url = url , thumbnail = thumb, fanart="", folder = False , isPlayable = True ) 

        
def resolve_resolveurl_youtube ( params ) :
    import resolveurl
    finalurl = resolveurl . resolve ( "https://www.youtube.com/watch?v=" + params . get ( "url" ) ) 
    plugintools . play_resolved_url ( finalurl )  


# cod yt live se termina aici 

 

#aici play it id
def playyt(params):
    import resolveurl
    url=keyboard_input("", "Play YouTube ID:", False)
    finalurl = resolveurl . resolve ( "https://www.youtube.com/watch?v=" + url ) 
    plugintools . play_resolved_url ( finalurl )  
    log(finalurl)
    
#pana aici    

#aici m3u code
def m3ucode(params): 
    plugintools.log("macvod.sphinxm3u")
    thumbnail = params.get("thumbnail")    

    
    url3 = params.get("url")
 
    request_headers=[]
    request_headers.append(["User-Agent","Mozilla/5.0 (Windows NT 10.0; rv:75.0) Gecko/20100101 Firefox/75.0"])
    body,response_headers = plugintools.read_body_and_headers( url3, headers=request_headers)
    url = body.strip().decode('utf-8')

    matches = plugintools.find_multiple_matches(url,'(#EXTINF:.+?tvg-logo=".*?",.*?[\n\r]+[^\n]+)')
    for generos in matches:  
        patron=plugintools.find_single_match(generos,'(?s)#EXTINF:.+?tvg-logo="(.*?)",(.*?)[\n\r]+([^\n]+)')    
        url=patron[2]
        titulo=patron[1]     
        thumb=patron[0]
        plugintools.add_item(action="m3u3_playtv", url=url,title="[LOWERCASE][CAPITALIZE][COLOR orange]"+titulo+" [/CAPITALIZE][/LOWERCASE][/COLOR]",thumbnail=thumb,fanart=thumbnail,folder=False,  isPlayable = True )


import urllib

def play_video_with_headers(url, headers):
    # Construiește URL-ul cu parametrii header
    headers_encoded = urllib.parse.urlencode(headers)
    full_url = f"{url}|{headers_encoded}"

    # Creează un obiect ListItem cu URL-ul și header-ele personalizate
    list_item = xbmcgui.ListItem(path=full_url)
    
    # Setează URL-ul și începe redarea
    xbmcplugin.setResolvedUrl(int(sys.argv[1]), True, list_item)

def m3u3_playtv(params):
    url3 = params.get("url")
    
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; rv:75.0) Gecko/20100101 Firefox/75.0",
        "Referer": "https://emisiuni.live",
        "Host": "p8.stirilepe.net",
        "Accept": "*/*",
        "Accept-Language": "en-US,en;q=0.5",
        "Accept-Encoding": "gzip, deflate, br, zstd",
        "Origin": "https://emisiuni.live",
        "Connection": "keep-alive",
        "Sec-Fetch-Dest": "empty",
        "Sec-Fetch-Mode": "cors",
        "Sec-Fetch-Site": "cross-site",
        "Sec-GPC": "1"
    }

    # Apelează funcția pentru a reda video cu header-ele personalizate
    play_video_with_headers(url3, headers)

run()
